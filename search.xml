<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言引用头文件时“ ”与&lt; &gt; 的区别</title>
    <url>/2021/02/21/C%E8%AF%AD%E8%A8%80%E5%BC%95%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E2%80%9C-%E2%80%9D%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>尖括号:直接去系统配置的库环境变量和用户配置的路径去搜索<br>双引号:编译器会先在项目的当前目录查找头文件,一般用于包含用户自己编写的头文件，包含范围最大，找不到后会向尖括号一样在系统配置的库的环境变量去寻找<br>由于搜索范围不同会导致预编译处理的速度不同</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>头文件</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 类原生编译教程</title>
    <url>/2021/04/15/Android-%E7%B1%BB%E5%8E%9F%E7%94%9F%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://z3.ax1x.com/2021/04/15/cgaJyT.jpg" alt="Android"></p>
<a id="more"></a>
<p>1.首先选择一个你想要编译的系统（有很多这里只是大概举例几个）</p>
<ul>
<li>Havoc </li>
<li>Evolution X</li>
<li>DotOS</li>
<li>Pixel Experience</li>
</ul>
<p>2.需要的基本知识：</p>
<ul>
<li><p>Linux 终端的基本语法</p>
</li>
<li><p>Git 基本操作指令</p>
</li>
</ul>
<p>**tip:**建议Linux指令需要用到什么到时直接百度一下即可，git基本操作建议学习廖雪峰的git教程，百度直接搜索即可找到。</p>
<p>3.实体主机： </p>
<ul>
<li><p>系统:Linux（本教程示例为Ubuntu LTS）</p>
</li>
<li><p>CPU:至少四核心，建议八核心</p>
</li>
<li><p>RAM:至少16GB，建议配置32GB及以上</p>
</li>
<li><p>硬盘:HDD即可 (SATA 3)，SSD更好</p>
</li>
<li><p>硬盘大小:至少500GB建议2TB</p>
</li>
</ul>
<p>**tip:**云主机亦可这里不讲如何配置云服务器,可百度查找如何配置。</p>
<p>4.安装必要的编译工具</p>
<ul>
<li> Ubuntu 18.04 LTS复制如下命令粘贴到终端<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-11-jdk git vim repo libwxgtk3.0-dev</span><br></pre></td></tr></table></figure></li>
<li>Ubuntu 20.04 LTS复制如下命令粘贴到终端<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-11-jdk git vim</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>5.设定Git账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;您的e-mail&quot;</span><br><span class="line">git config --global user.name &quot;您的名字&quot;</span><br></pre></td></tr></table></figure>
<p>**tip:**自己首先去注册一个GitHub账号，百度搜索github即可看到官网，看不太懂的可以翻译下网页注册，这里的用户名和e-mail就是你注册账号时填写的账号。</p>
<p>6.安装repo工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;bin</span><br><span class="line">curl http:&#x2F;&#x2F;commondatastorage.googleapis.com&#x2F;git-repo-downloads&#x2F;repo &gt; ~&#x2F;bin&#x2F;repo &amp;&amp; chmod a+x ~&#x2F;bin&#x2F;repo</span><br></pre></td></tr></table></figure>
<p>7.同步 Android 源码</p>
<p>   可以参考GitHub上你想编译的ROM Manifest仓库中的readme.md文档</p>
<p>   本文以 Evolution X 为例进行讲解</p>
<ul>
<li>给evolution建立个文件夹，并切换到新建的evolution文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;evolution</span><br><span class="line">cd ~&#x2F;evolution</span><br></pre></td></tr></table></figure></li>
<li>repo init  就是把编译所需的一些git 仓库地址一起整合到你的本地(manifest是清单的意思，关于repo这个工具感兴趣的伙伴可以百度一下)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repo init -u https:&#x2F;&#x2F;github.com&#x2F;Evolution-X&#x2F;manifest -b elle</span><br></pre></td></tr></table></figure>
<pre><code>   //注意请不要直接复制这条指令，请看你想要编译的rom的README.md文档中的描述
</code></pre>
</li>
</ul>
<ul>
<li>开始同步Android源代码(大概150GB左右，不同的安卓版本ROM大小会有差别)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags</span><br></pre></td></tr></table></figure>
<pre><code>   //主要的是repo sync，后面的都是附加参数，可以自行百度详细了解
   
</code></pre>
</li>
</ul>
<p>8.制作or修改device tree 、vendor tree、 内核</p>
<p>   对于和我一样的新手当然是修改device tree了，但是比较新的手机，通常就是没有    device tree，需要自己补上，以后等我学会了，可以写篇文章(估计不可能了，哈哈哈)首先在GitHub上中找到对应机型的相关文件。<br>例如LG V50的这几个文件</p>
<p> device tree和vendor tree文件夹并非一定只有一个文件夹，往往会有与厂商相关的common（公共部分）所以开始编译时如果提示缺少什么可以往这里注意一下。<br>可以将fork到自己的账号下，然后git clone也可以直接下载后解压,总之下载到本地即可。<br>devices tree 文件夹放到devices→lge<br>kernel 文件夹放到kernel→lge<br>vendor tree 文件夹放到vendor→lge<br>device tree修改：</p>
<ul>
<li>首先对几个文件的文件名进行修改，如果没有这些文件请忽略。<br>lineage_flashlmdd.mk → evolution_flashlmdd.mk<br>overly-lineage/ → overly-evolution/ <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;我用的lineage的tree所以 手机代号前为lineage，请自行类比修改。</span><br></pre></td></tr></table></figure></li>
<li>对evolution_flashlmdd.mk内容进行修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># Copyright (C) 2019 The LineageOS Project</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#      http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line">#</span><br><span class="line">​</span><br><span class="line"># Inherit from those products. Most specific first.</span><br><span class="line">$(call inherit-product, $(SRC_TARGET_DIR)&#x2F;product&#x2F;core_64_bit.mk)</span><br><span class="line">$(call inherit-product, $(SRC_TARGET_DIR)&#x2F;product&#x2F;full_base_telephony.mk)</span><br><span class="line">​</span><br><span class="line">$(call inherit-product, $(SRC_TARGET_DIR)&#x2F;product&#x2F;product_launched_with_p.mk)</span><br><span class="line">​</span><br><span class="line"># Inherit from flashlmdd device</span><br><span class="line">$(call inherit-product, device&#x2F;lge&#x2F;flashlmdd&#x2F;device.mk)</span><br><span class="line">​</span><br><span class="line"># Inherit some common Evolution stuff.</span><br><span class="line">**　$(call inherit-product, vendor&#x2F;evolution&#x2F;config&#x2F;common_full_phone.mk)</span><br><span class="line"># Device identifiers</span><br><span class="line">​</span><br><span class="line">**　PRODUCT_NAME :&#x3D; evolution_flashlmdd</span><br><span class="line">PRODUCT_DEVICE :&#x3D; flashlmdd</span><br><span class="line">PRODUCT_BRAND :&#x3D; lge</span><br><span class="line">PRODUCT_MANUFACTURER :&#x3D; LGE</span><br><span class="line">PRODUCT_RELEASE_NAME :&#x3D; V50 ThinQ</span><br><span class="line">PRODUCT_MODEL :&#x3D; LM-V500</span><br><span class="line">​</span><br><span class="line"># Inherit Evolution-X product configuration</span><br><span class="line">** TARGET_BOOT_ANIMATION_RES :&#x3D; 1440</span><br><span class="line">** TARGET_GAPPS_ARCH :&#x3D; arm64</span><br><span class="line">** EVO_MAINTAINER :&#x3D; YouthGT</span><br><span class="line">** EVO_SUPPORT_URL :&#x3D; https:&#x2F;&#x2F;youthgt.github.io&#x2F;</span><br><span class="line">** EVO_DONATE_URL :&#x3D; https:&#x2F;&#x2F;s3.ax1x.com&#x2F;2021&#x2F;03&#x2F;11&#x2F;6YUyX6.png</span><br><span class="line"># Maintainer</span><br><span class="line">​</span><br><span class="line">PRODUCT_GMS_CLIENTID_BASE :&#x3D; android-lge</span><br><span class="line">​</span><br><span class="line">TARGET_VENDOR_PRODUCT_NAME :&#x3D; flashlmdd_lao_com</span><br><span class="line">TARGET_VENDOR_DEVICE_NAME :&#x3D; flashlmdd</span><br><span class="line">​</span><br><span class="line">PRODUCT_BUILD_PROP_OVERRIDES +&#x3D; \</span><br><span class="line">    PRODUCT_NAME&#x3D;&quot;flashlmdd_lao_com&quot; \</span><br><span class="line">    PRIVATE_BUILD_DESC&#x3D;&quot;flashlmdd_lao_com-user 10 QKQ1.191021.002 203281715d08f release-keys&quot;</span><br><span class="line">​</span><br><span class="line">BUILD_FINGERPRINT :&#x3D; &quot;lge&#x2F;flashlmdd_lao_com&#x2F;flashlmdd:10&#x2F;QKQ1.191021.002&#x2F;203281715d08f:user&#x2F;release-keys&quot;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
//带有＊＊ 的为需要修改的地方，并不能能完全按照我的修改，建议在github上查找与你编译的rom的其他机型的该文件，里面的英文大概都可看懂，自行大概理解即可。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**tip:**这里大家可能会遇到少修改或者漏改的问题，这里建议查看与你编译同机型类原生大佬的git commit 进行修改，修改时每次修改后也进行git commit以便记录自己的修改过程，方便出错时修改。</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 9.开始编译</p>
<pre><code>  无相关基础的新手不要抱着第一次就可以编译成功且开机的希望来做，第一次大部分都是失败的，不要灰心，这是正常现象，毕竟你做到这里已经比很多人强了，不是吗？
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设定Cache</span><br><span class="line">export USE_CCACHE&#x3D;1</span><br><span class="line">export CCACHE_EXEC&#x3D;&#x2F;usr&#x2F;bin&#x2F;ccache</span><br><span class="line">ccache -M 50G</span><br><span class="line">&#96;&#96;&#96;  </span><br></pre></td></tr></table></figure>
<p>//这样可以加快编译的速度，电脑剩余空间不多的情况就不要设置了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 开始编译</span><br></pre></td></tr></table></figure>
<p>. build/envsetup.sh<br>lunch ROM代号_厂商代号-编译类型<br>brunch ROM代号_厂商代号-编译类型  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于我的V50来讲就是</span><br></pre></td></tr></table></figure>
<p>. build/envsetup.sh<br>lunch evolution_flashlmdd-userdebug<br>brunch evolution_flashlmdd-userdebug</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 编写脚本</span><br><span class="line"> 将编译时所需的命令编写成脚本方便编译，虽然这个步骤并非必要但我还是建议你这样做。</span><br><span class="line"></span><br><span class="line"> 新建一个文本文档后缀.sh,名字随意比如就叫make.sh</span><br></pre></td></tr></table></figure>
<p>#!/bin/bash<br>#Build flashlmdd<br>#cd ~/evolution<br>export USE_CCACHE=1<br>export CCACHE_EXEC=/usr/bin/ccache<br>ccache -M 50G<br>. build/envsetup.sh<br>** brunch evolution_flashlmdd-userdebug | tee evolution_flashlmdd_$(date +”%Y%m%d_%H.%M”)GMT8.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#x2F;&#x2F;注意将rom代号和机型代号修改，**为需要修改的地方</span><br></pre></td></tr></table></figure>
<p>10.静等编译。<br>  <strong>编译失败的解决办法</strong> </p>
<ul>
<li>Google搜索，CSDN，GitHub搜索，注意搜索时复制的内容，只复制错误内容，不要搜索无关的内容 。      </li>
<li>tg的几个群组也是解决问题的好地方。<br>Android OS Building Support<br>Android Building Help<br>RomDevelopment  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;直接tg里面搜索即可，交流建议使用英文哦。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>编译Android</tag>
        <tag>ROM</tag>
      </tags>
  </entry>
  <entry>
    <title>Altium Designer学习总结（不定时更新）</title>
    <url>/2021/02/19/AltiumDesigner/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210223003740743.png" alt="AD"></p>
<a id="more"></a>
<h1 id="Altlium-designer画PCB步骤"><a href="#Altlium-designer画PCB步骤" class="headerlink" title="Altlium designer画PCB步骤"></a>Altlium designer画PCB步骤</h1><h2 id="原理图绘制"><a href="#原理图绘制" class="headerlink" title="原理图绘制"></a>原理图绘制</h2><p>元件的放置，网络编号，封装添加（封装管理器），编译，导入到PCB</p>
<h3 id="PCB绘制"><a href="#PCB绘制" class="headerlink" title="PCB绘制"></a>PCB绘制</h3><p> 布局，布线，敷铜，电器规则检查（规则设置）<br>调整并锁定特殊零件</p>
<h5 id="常见特殊位置的零件："><a href="#常见特殊位置的零件：" class="headerlink" title="常见特殊位置的零件："></a>常见特殊位置的零件：</h5><ol>
<li>接口类：如：电源接口、扬声器、视频、音频接口、键盘、鼠标、USB等；</li>
<li>显示类：如：发光二极管、数码显示管等;                               </li>
<li>旋钮类：如：音量控制、调谐、波段等；</li>
<li>其他类：必须放置在特定位置的零件。<h3 id="PCB设计的基本原则"><a href="#PCB设计的基本原则" class="headerlink" title="PCB设计的基本原则"></a>PCB设计的基本原则</h3><h4 id="布局原则"><a href="#布局原则" class="headerlink" title="布局原则"></a>布局原则</h4></li>
<li>元件的布局要求均衡，疏密有序，避免头重脚轻。</li>
<li>元件布局应按照元件的关键性来进行，先布置关键元件如微处理器、DSP、FPGA、存储器等，按照数据线和地址线的走向，就近原则布置元件。</li>
<li>存储器模块尽量并排放置，以缩短走线长度。</li>
<li>尽可能按照信号流向进行布局。<br>注意：零件布局，应当从机械结构散热、电磁干扰、将来布线的方便性等方面综合考虑。先布置与机械尺寸有关的器件，并锁定这些器件，然后是大的占位置的器件和电路的核心元件，再是外围的小元件。<h4 id="布线原则"><a href="#布线原则" class="headerlink" title="布线原则"></a>布线原则</h4></li>
<li>一定要确保导线的宽度达到导线的载流要求，并尽可能宽些，留出余量。电源和地的导线要更宽，具体数值视实际情况而定。地线＞电源线＞导线</li>
<li>导线间最小间距是由线的绝缘电阻和击穿电阻决定的，在可能的情况下尽量定得大一些，一般不能小于12mil。</li>
<li>设计布线时，走线尽量少拐弯，力求线条简单明了。</li>
<li>微处理器芯片的数据线地址线应尽量平行布置。</li>
<li>输入端与输入端边线应避免相邻平行，以免产生反射干扰，必要时应加线隔离。两相邻的布线要相互垂直。平行容易产生寄生耦合。</li>
<li>利用包地，覆铜等工艺提高PCB的稳定性和抗干扰性。<h4 id="重点规则"><a href="#重点规则" class="headerlink" title="重点规则"></a>重点规则</h4></li>
<li>零件（元件）之间最小距离。</li>
<li>零件方向。</li>
<li>零件放置所在层。</li>
<li>导线的宽度。</li>
<li>导线所在层。<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1></li>
<li> action not available in 3D view的意思是：3D视图中不可用的操作，也就是不能连线（按 2 就可以连线）。如果是要在3D模式切换视角，就是：Shift+鼠标右键，Ctrl+鼠标右键是放大缩小。v+b是翻转。</li>
<li>出现多余的线点工具-》复位错误标志</li>
<li>系统自带了两个集成库：多种器件集成库miscellaneous devices和多种连接器miscellaneous connectors。这两个集成库，包括了画原理图和PCB板图所需要的绝大部分零件。但集成库中有的SCH零件或PCB封装的外形、图形，不是我们所需的，不符合我们的要求，需要进行修改。但我们知道集成库是不能直接修改和编辑的。需要先把集成库分解成SCH库和PCB库，然后分别启动SCH图编辑器或PCB库编辑器，进行修改。方法很简单。<br>在电脑硬盘上找到adxx软件的安装位置<br>找到AD16软件</li>
</ol>
<p>-双击打开软件的文件夹———-双击打开库文件夹Librares——-找到miscellaneous devices intlib——-电脑自动启动AD程序——–弹出：摘录源文件或安装文件  对话框——–点击对话框底部：摘取源文件———弹出：萃取位置对话框———–选中：打开已有的集成库工程———–单击：确定———此时在AD16屏幕的左侧弹出：projects工程面板———面板内出现分解出来的SCHLIB原理图库和PCBLIB封装库———双击SCHLIB——–打开SCH库零件视图———-单击AD16屏幕右下角的SCH——–选中SCH LIBRARY———弹出SCH库面板——-在SCH库面板的器件栏———-显示上百种SCH零件———选中需要的SCH零件——–单击选中——-在SCH库编辑器的主窗口选中这个SCH零件的图形——对图形进行编辑和修改 使之符合你的个人要求——–保持——–退出。<br>同理：如果想要在AD16系统自带的集成库中添加零件，也是不能直接添加的，也要先把集成库分解成SCH库和PCB库，然后在SCH库中添加新零件，在SCH零件编辑器中添加PCB封装模型。就OK了。<br>4.  GPIO（英语：General-purpose input/output），通用型之输入输出的简称，功能类似8051的P0—P3，其接脚可以供使用者由程控自由使用，PIN脚依现实考量可作为通用输入（GPI）或通用输出（GPO）或通用输入与输出（GPIO），如当clk generator, chip select等。<br>5. 主菜单File-&gt;Import，选择一个AutoCAD文件（*.DXF或*.DWG），在弹出的对话框“Import From AutoCAD”中，设置CAD单位到PCB单位的转换（例如：1 AutoCAD Unit = 1mm），CAD文件导入PCB的哪一层（例如：放置于Mechanical4层），点击OK即可。切换层标签到Mechanical4，快捷键s-&gt;All on layer。主菜单Design-&gt;Board Shape-&gt;Define from Selected Objects，按end键刷新一下页面即可<br>6. Top Solder层，就是用来控制做板的时候不覆盖绿油（白油）的区域，比如焊盘的位置，一些关键信号的测试点，不覆盖绿油，才能漏出焊盘。如果你在焊盘的位置不包含Top Solder层，则焊盘会盖上绿油，需要你磨掉绿油（白油），才能焊接。<br>Top Paste层，提供给制版厂，用于制作钢网，凡是Top Paste层出现的地方，钢网上均开孔。也就是说，这一层不是用来控制PCB的，而是控制钢网开孔的，当SMT贴片生产时，这些开孔用来刷锡膏，刷锡膏（漏锡膏）的位置，恰好就是焊盘所在地位置。<br>7. SOT的英文全名是：Small Outline Transistor(小外形晶体管)，SOT是一种表面贴装的封装形式，一般引脚小于等于5个的小外形晶体管。根据表面宽度的不同分为两种，一种宽度为1.3mm，一种宽度为1.6mm。<br>SOD的英文全名是：Small Outline Diode(小外形二级管)，SOD后面常会是跟一串数字，表示封装的标准序号，如：SOD-23,SOD-523，SOD323等等。<br>其实SOD指贴片二极管的封装，而SOT是一般指贴片三极管的封装。<br>8.网络标签未连接：拖动网络标号，连接的线跟着动了就是连接成功了。拖动网络标号的时候左下角有个连接点，我记得要用他来连接，只是把网络标号放在线上或者随便放都是不识别的，那个连接点放对了一般都是成功了。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>Altium Designer</tag>
        <tag>PCB</tag>
      </tags>
  </entry>
  <entry>
    <title>HC-05蓝牙模块的调试</title>
    <url>/2021/04/28/HC-05%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E7%9A%84%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>一、进入AT模式<br>（只适用于有一点点基础的看，看不太懂的可以先百度一下）<br>HC-05带小黑色按钮的，要选按着黑色按钮，然后再插上电脑的USB口<br>不带按钮的，要给KEY接线端接上一个电压（VCC），然后再插入电脑，即可<br>当蓝牙模块state灯变为慢闪，则表明已经进入AT模式。</p>
<ul>
<li><p>在AT模式下，波特率通常设置为：38400</p>
</li>
<li><p>部分蓝牙模块的波特率可能是9600，具体看产品的指引。</p>
</li>
</ul>
<p>二、用AT常用指令设置HC-05</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AT+NAME&#x3D;Bluetooth Car 蓝牙名称为Bluetooth Car  </span><br><span class="line">AT+ROLE&#x3D;0         蓝牙模式为从模式  </span><br><span class="line">AT+CMODE&#x3D;0         蓝牙连接模式为任意地址连接模式  </span><br><span class="line">AT+PSWD&#x3D;1234       蓝牙配对密码为1234  </span><br><span class="line">AT+UART&#x3D;9600       蓝牙通信串口波特率为9600，停止位1位，无校验位 </span><br><span class="line">AT+RMAAD          清空配对列表  </span><br></pre></td></tr></table></figure>
<p>四、HC-05的接线</p>
<p>蓝牙与USB转TTL模块接线为 RXD-TX TXD-RX VCC-VCC GND-GND</p>
<p>四、连接测试</p>
<p>设好从模式后，把蓝牙模块接上手机进行测试，当蓝牙的变成快闪模式的时候，就可配对，默认密码为设置的1234。</p>
]]></content>
      <categories>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>git 本地，远程回退版本</title>
    <url>/2021/04/09/git-%E6%9C%AC%E5%9C%B0%EF%BC%8C%E8%BF%9C%E7%A8%8B%E5%9B%9E%E9%80%80%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="一、本地回滚"><a href="#一、本地回滚" class="headerlink" title="一、本地回滚"></a>一、本地回滚</h2><p> git reset –hard commit-id  //回滚到commit-id</p>
<h2 id="二、远程回滚"><a href="#二、远程回滚" class="headerlink" title="二、远程回滚"></a>二、远程回滚</h2><a id="more"></a>

<p>　　1、git checkout main</p>
<p>　　2、git pull</p>
<p>　　3、git branch main_backup //备份一下这个分支当前的情况</p>
<p>　　4、git reset –hard the_commit_id //把master本地回滚到the_commit_id</p>
<p>　　5、git push origin :master //删除远程 master</p>
<p>　　6、git push origin master //用回滚后的本地分支重新建立远程分支</p>
<p>　　7、git branch -d master_backup //如果前面都成功了，删除这个备份分支</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>为LG V50 ThinQ (flashlmdd)编译Evolution X</title>
    <url>/2021/03/09/LG-V50-ThinQ-%E7%BC%96%E8%AF%91u/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/09/68Q0pQ.md.png" alt="Evolution X"></p>
<p>　　刷机这么多年了没有自己整出来过一个Rom是不是有点遗憾？<a id="more"></a>我也这么想的，随后便开始寻找编译Rom的方法，其实有了 内核 设备树 和 vendor 就很简单了，稍加修改即可。自己前前后后弄了四天才搞定。（下载链接在最后)<br>　　最初准备搞exTHmUI毕竟本地化比较好，奈何Android R的exTHmUI源码出了问题一时半会儿团队修好，不能整个Android Q 的吧？毕竟要紧跟最新（别提刚出来开没几天的Android S图片）只好转个方向吧。Havoc有GSI直接就可以刷，还有Xtend 和Dotos 有大佬youngguo已经搞了，最后想起来用LG G7时候用过的Evolution X ，即有 PE 的所有，又有较为完整的自定义功能。就它了，开工！<br>　　首先找个教程，讲真对于我这个小白来说这些教程真的没有什么很大的帮助，大多只提到了很多的基础操作步骤。这些步骤对于编译已经包含在这些类原生的项目中机型之类的已经够了（因为官方已经把这些设备的设备树，Vendor 内核放在仓库中，编译时 lunch 即可把仓库中与机型相关的编译必须文件下载下来）但是这样的机型一般比较老，显然flashmdd是没有的。只能从GitHub获取，国外的Markus已经把基于Lineage 的Kernel device tree vendor放出来了，我下载下来进行修改便开始编译，想象是美好的，现实是残酷的，报错给我整吐了。最后终于编译出来了，刷进去不开机。。。。。。　　<br>　　转机在昨天晚上，想起先前编译类原生的大佬youngguo，GItHub上会不会有他的commits可以参考呢？果然是有的，直接看着大佬的commits进行修改过后在进行编译，早上起床看进度，编译完成了，刷入，开机，完美！</p>
<p><strong>Bug:</strong></p>
<p>有bug欢迎反馈，我会尽力修复！</p>
<p><strong>Tips：</strong></p>
<p>1.　刷机方法：使用twrp3.3.1_四清_格data_刷Evolution X__刷twrp3.3.1_刷magisk22.0_选择b分区_重启进入twrp_刷magisk22.0_刷解密_重启系统开机（引用youngguo的教程，这个流程可以确保开机）</p>
<p>2.　volte基本无解吧，本人没有能力修复这个。</p>
<p>3.　本人移动卡4G使用无问题，联通5G功能自行测试，联通应该是没问题的，电信据说需要volte才可以打电话和发短信。</p>
<p>** Dowload：**<br>QQ群号：291437424</p>
<p>最后感谢youngguo 、Markus的开源，以及大家对我的支持</p>
<p>编译耗时，耗财，费力,有能力的兄弟可以赞助支持一下</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>编译Android</tag>
        <tag>ROM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客的搭建记录</title>
    <url>/2020/02/19/construct/</url>
    <content><![CDATA[<h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v	<span class="comment">#查看node版本</span></span><br><span class="line">npm -v	<span class="comment">#查看npm版本&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装淘宝的cnpm-管理器"><a href="#安装淘宝的cnpm-管理器" class="headerlink" title="安装淘宝的cnpm 管理器"></a>安装淘宝的cnpm 管理器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org	</span><br></pre></td></tr></table></figure>
<h2 id="查看cnpm版本"><a href="#查看cnpm版本" class="headerlink" title="查看cnpm版本"></a>查看cnpm版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo框架-查看hexo版本"><a href="#安装hexo框架-查看hexo版本" class="headerlink" title="安装hexo框架 查看hexo版本"></a>安装hexo框架 查看hexo版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v	</span><br></pre></td></tr></table></figure>
<h2 id="创建blog目录"><a href="#创建blog目录" class="headerlink" title="创建blog目录"></a>创建blog目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir blog	   </span><br><span class="line">```                       </span><br><span class="line"><span class="comment">## 进入blog目录 生成博客 初始化博客</span></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">cd</span> blog	</span><br><span class="line">sudo hexo init </span><br></pre></td></tr></table></figure>
<h2 id="启动本地博客服务-本地访问地址"><a href="#启动本地博客服务-本地访问地址" class="headerlink" title="启动本地博客服务 本地访问地址"></a>启动本地博客服务 本地访问地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s	</span><br><span class="line">http://localhost:4000/	</span><br></pre></td></tr></table></figure>
<h2 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h2><p>hexo clean #清理<br>hexo g #生成</p>
<h2 id="Github创建一个新的仓库"><a href="#Github创建一个新的仓库" class="headerlink" title="Github创建一个新的仓库"></a>Github创建一个新的仓库</h2><p>YourGithubName.github.io</p>
<h2 id="在blog目录下安装git部署插件"><a href="#在blog目录下安装git部署插件" class="headerlink" title="在blog目录下安装git部署插件"></a>在blog目录下安装git部署插件</h2><h2 id="cnpm-install-–save-hexo-deployer-git"><a href="#cnpm-install-–save-hexo-deployer-git" class="headerlink" title="cnpm install –save hexo-deployer-git "></a>cnpm install –save hexo-deployer-git </h2><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"> 		<span class="built_in">type</span>: git</span><br><span class="line">		repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line"> 		branch: master</span><br></pre></td></tr></table></figure>
<h2 id="部署到Github仓库里"><a href="#部署到Github仓库里" class="headerlink" title="部署到Github仓库里"></a>部署到Github仓库里</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d	</span><br></pre></td></tr></table></figure>
<h2 id="访问这个地址可以查看博客"><a href="#访问这个地址可以查看博客" class="headerlink" title="访问这个地址可以查看博客"></a>访问这个地址可以查看博客</h2><p><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a></p>
<h2 id="下载NEXT主题到本地"><a href="#下载NEXT主题到本地" class="headerlink" title="下载NEXT主题到本地"></a>下载NEXT主题到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/theme-next/hexo-theme-next themes/next </span><br></pre></td></tr></table></figure>
<h2 id="修改hexo根目录下的-config-yml-文件"><a href="#修改hexo根目录下的-config-yml-文件" class="headerlink" title="修改hexo根目录下的 _config.yml 文件"></a>修改hexo根目录下的 _config.yml 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: Next</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c	</span><br><span class="line"><span class="comment">#清理一下</span></span><br><span class="line">hexo g	<span class="comment">#生成</span></span><br><span class="line">hexo d	<span class="comment">#部署到远程Github仓库</span></span><br></pre></td></tr></table></figure>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1 只需要将<a href="http://www.github.com/%E6%94%B9%E4%B8%BAwww.github.com.cnpmjs.org/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%BC%8F%E5%8A%A0%E9%80%9F">www.github.com/改为www.github.com.cnpmjs.org/就可以实现一键式加速</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>cnpm命令无反应的解决办法</title>
    <url>/2021/02/26/cnpm%E5%91%BD%E4%BB%A4%E6%97%A0%E5%8F%8D%E5%BA%94%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>前几天发现cnpm命令无反应也无报错，最后尝试卸载重装即可解决该问题<a id="more"></a><img src="https://s3.ax1x.com/2021/02/26/6SkDqf.png" alt="cnpm无反应.png"></p>
<ol>
<li>卸载 <code>npm uninstall -g cnpm --registry=https://registry.npm.taobao.org</code></li>
<li>注册 <code>npm set registry https://registry.npm.taobao.org</code></li>
<li>解析 <code>npm set disturl https://npm.taobao.org/dist</code></li>
<li>安装 <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ol>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>cnpm</tag>
      </tags>
  </entry>
  <entry>
    <title>keil uvsion5与51单片机的学习总结（不定时更新）</title>
    <url>/2020/12/19/keil/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210223003647586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lvdXRoR1Q=,size_16,color_FFFFFF,t_70" alt="keil"></p>
<a id="more"></a>
<h3 id="keil-uvsion5软件下载"><a href="#keil-uvsion5软件下载" class="headerlink" title="keil uvsion5软件下载"></a>keil uvsion5软件下载</h3><p><a href="https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw">https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw</a><br>提取码: f7xv （失效请提醒）</p>
<h3 id="常见报错总结"><a href="#常见报错总结" class="headerlink" title="常见报错总结"></a>常见报错总结</h3><p> 1.*** ERROR L104: MULTIPLE PUBLIC DEFINITIONS<br> 出现该错误则是因为程序中bai某个变du量重复定义，把头文件zhi中的变量定义前加extern(只是变量声明不用初始化)，再在某一个要调用该变量的c文件的程序之前再定义(注意第一个调用的c文件要负责附带初始化该变量，其他调用的c文件就不需要初始化过程啦)。</p>
<blockquote>
<p>extern用于变量的用法：<br>extern int a;//声明一个全局变量a<br>int a; //定义一个全局变量a<br>extern int a =0 ;//定义一个全局变量a 并给初值。一旦给予赋值，一定是定义，定义才会分配存储空间。（注意：经过测试在GCC中，这样定义变量是不能通过编译的，而在VS2013可以）<br>int a =0;//定义一个全局变量a,并给初值，<br>声明之后不能直接使用这个变量，需要定义之后才能使用。<br>第四个等于第三个，都是定义一个可以被外部使用的全局变量，并给初值。<br>当你要引用一个全局变量的时候，你就要声明extern int a;这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明，就会出现变量重复定义的错误。</p>
</blockquote>
<h2 id="C51语法的常见问题"><a href="#C51语法的常见问题" class="headerlink" title="C51语法的常见问题"></a>C51语法的常见问题</h2><ol>
<li><em>nop</em>()函数。<br>C语言中没有<em>nop</em>()函数。<br>在51C中一般包含在#include “intrins.h” 头文件中。该函数是在51单片机中用的延时函数，表示执行一条没有什么意义的指令，延时一个指令周期，有的指令周期是两个或两个以上的机械周期，但是<em>nop</em>();指令需要的只是一个机械周期也就是12个时钟周期（震荡周期）。<br>51单片机中，1个机械周期 = 12个时钟周期 = 12 * （ 1 / f）。（f 为晶振频率）。如果只用的是12MHZ的晶振，那么 一个机械周期就是1us；也就是说：nop(); 指令的延迟时间为 1us。可以较为精确得控制延迟时间。<blockquote>
<p>nop指令的作用：<br>1）就是通过nop指令的填充（nop指令一个字节），使指令按字对齐，从而减少取指令时的内存访问次数。（一般用来内存地址偶数对齐，比如有一条指令，占3字节，这时候使用nop指令，cpu 就可以从第四个字节处读取指令了。）<br>2）通过nop指令产生一定的延迟，但是对于快速的CPU来说效果不明显，可以使用rep前缀，多延迟几个时钟。<br>3）i/o传输时，也会用一下 nop，等待缓冲区清空，总线恢复；<br>4）清除由上一个算术逻辑指令设置的flag位；</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>keil uvsion 5</tag>
        <tag>51单片机</tag>
      </tags>
  </entry>
</search>
