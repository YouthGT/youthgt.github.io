<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 博客的搭建记录</title>
    <url>/2020/02/19/construct/</url>
    <content><![CDATA[<h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v	<span class="comment">#查看node版本</span></span><br><span class="line">npm -v	<span class="comment">#查看npm版本&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装淘宝的cnpm-管理器"><a href="#安装淘宝的cnpm-管理器" class="headerlink" title="安装淘宝的cnpm 管理器"></a>安装淘宝的cnpm 管理器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org	</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查看cnpm版本"><a href="#查看cnpm版本" class="headerlink" title="查看cnpm版本"></a>查看cnpm版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo框架-查看hexo版本"><a href="#安装hexo框架-查看hexo版本" class="headerlink" title="安装hexo框架 查看hexo版本"></a>安装hexo框架 查看hexo版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v	</span><br></pre></td></tr></table></figure>
<p>##创建blog目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir blog	   </span><br><span class="line">```                       </span><br><span class="line"><span class="comment">## 进入blog目录 生成博客 初始化博客</span></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">cd</span> blog	</span><br><span class="line">sudo hexo init </span><br></pre></td></tr></table></figure>
<h2 id="启动本地博客服务-本地访问地址"><a href="#启动本地博客服务-本地访问地址" class="headerlink" title="启动本地博客服务 本地访问地址"></a>启动本地博客服务 本地访问地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s	</span><br><span class="line">http://localhost:4000/	</span><br></pre></td></tr></table></figure>
<h2 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h2><p>hexo clean #清理<br>hexo g #生成</p>
<h2 id="Github创建一个新的仓库"><a href="#Github创建一个新的仓库" class="headerlink" title="Github创建一个新的仓库"></a>Github创建一个新的仓库</h2><p>YourGithubName.github.io</p>
<h2 id="在blog目录下安装git部署插件"><a href="#在blog目录下安装git部署插件" class="headerlink" title="在blog目录下安装git部署插件"></a>在blog目录下安装git部署插件</h2><h2 id="cnpm-install-–save-hexo-deployer-git"><a href="#cnpm-install-–save-hexo-deployer-git" class="headerlink" title="cnpm install –save hexo-deployer-git "></a>cnpm install –save hexo-deployer-git </h2><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"> 		<span class="built_in">type</span>: git</span><br><span class="line">		repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line"> 		branch: master</span><br></pre></td></tr></table></figure>
<h2 id="部署到Github仓库里"><a href="#部署到Github仓库里" class="headerlink" title="部署到Github仓库里"></a>部署到Github仓库里</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d	</span><br></pre></td></tr></table></figure>
<h2 id="访问这个地址可以查看博客"><a href="#访问这个地址可以查看博客" class="headerlink" title="访问这个地址可以查看博客"></a>访问这个地址可以查看博客</h2><p><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a></p>
<h2 id="下载NEXT主题到本地"><a href="#下载NEXT主题到本地" class="headerlink" title="下载NEXT主题到本地"></a>下载NEXT主题到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/theme-next/hexo-theme-next themes/next </span><br></pre></td></tr></table></figure>
<h2 id="修改hexo根目录下的-config-yml-文件"><a href="#修改hexo根目录下的-config-yml-文件" class="headerlink" title="修改hexo根目录下的 _config.yml 文件"></a>修改hexo根目录下的 _config.yml 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: Next</span><br></pre></td></tr></table></figure>
<h2 id="最后发布"><a href="#最后发布" class="headerlink" title="最后发布"></a>最后发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c	<span class="comment">#清理一下</span></span><br><span class="line">hexo g	<span class="comment">#生成</span></span><br><span class="line">hexo d	<span class="comment">#部署到远程Github仓库</span></span><br></pre></td></tr></table></figure>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1 只需要将<a href="http://www.github.com/%E6%94%B9%E4%B8%BAwww.github.com.cnpmjs.org/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%BC%8F%E5%8A%A0%E9%80%9F">www.github.com/改为www.github.com.cnpmjs.org/就可以实现一键式加速</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>keil uvsion5软件的使用</title>
    <url>/2020/12/19/%E6%B5%8B%E8%AF%95-1/</url>
    <content><![CDATA[<h3 id="keil-uvsion5软件下载"><a href="#keil-uvsion5软件下载" class="headerlink" title="keil uvsion5软件下载"></a>keil uvsion5软件下载</h3><p><a href="https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw">https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw</a><br>提取码: f7xv （失效请提醒）</p>
<h3 id="常见报错总结"><a href="#常见报错总结" class="headerlink" title="常见报错总结"></a>常见报错总结</h3><p> 1.*** ERROR L104: MULTIPLE PUBLIC DEFINITIONS<br> 出现该错误则是因为程序中bai某个变du量重复定义，把头文件zhi中的变量定义前加extern(只是变量声明不用初始化)，再在某一个要调用该变量的c文件的程序之前再定义(注意第一个调用的c文件要负责附带初始化该变量，其他调用的c文件就不需要初始化过程啦)。</p>
<blockquote>
<p>extern用于变量的用法：<br>extern int a;//声明一个全局变量a<br>int a; //定义一个全局变量a<br>extern int a =0 ;//定义一个全局变量a 并给初值。一旦给予赋值，一定是定义，定义才会分配存储空间。（注意：经过测试在GCC中，这样定义变量是不能通过编译的，而在VS2013可以）<br>int a =0;//定义一个全局变量a,并给初值，<br>声明之后不能直接使用这个变量，需要定义之后才能使用。<br>第四个等于第三个，都是定义一个可以被外部使用的全局变量，并给初值。<br>当你要引用一个全局变量的时候，你就要声明extern int a;这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明，就会出现变量重复定义的错误。</p>
</blockquote>
<h2 id="C51语法的常见问题"><a href="#C51语法的常见问题" class="headerlink" title="C51语法的常见问题"></a>C51语法的常见问题</h2><ol>
<li><em>nop</em>()函数。<br>C语言中没有<em>nop</em>()函数。<br>在51C中一般包含在#include “intrins.h” 头文件中。该函数是在51单片机中用的延时函数，表示执行一条没有什么意义的指令，延时一个指令周期，有的指令周期是两个或两个以上的机械周期，但是<em>nop</em>();指令需要的只是一个机械周期也就是12个时钟周期（震荡周期）。<br>51单片机中，1个机械周期 = 12个时钟周期 = 12 * （ 1 / f）。（f 为晶振频率）。如果只用的是12MHZ的晶振，那么 一个机械周期就是1us；也就是说：nop(); 指令的延迟时间为 1us。可以较为精确得控制延迟时间。<blockquote>
<p>nop指令的作用：<br>1）就是通过nop指令的填充（nop指令一个字节），使指令按字对齐，从而减少取指令时的内存访问次数。（一般用来内存地址偶数对齐，比如有一条指令，占3字节，这时候使用nop指令，cpu 就可以从第四个字节处读取指令了。）<br>2）通过nop指令产生一定的延迟，但是对于快速的CPU来说效果不明显，可以使用rep前缀，多延迟几个时钟。<br>3）i/o传输时，也会用一下 nop，等待缓冲区清空，总线恢复；<br>4）清除由上一个算术逻辑指令设置的flag位；</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Keil的使用</category>
      </categories>
      <tags>
        <tag>keil</tag>
        <tag>51单片机</tag>
      </tags>
  </entry>
</search>
