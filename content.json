{"pages":[{"title":"","text":"##README.md测试","link":"/README.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"关于","text":"大二在读学生，主要分享一些自己学习中遇到的一些问题。欢迎关注我的微信公众号：YouthGT","link":"/about/index.html"},{"title":"Resume","text":"蓄力中，待我经历满满，再来写。定个目标2021.10.1来写","link":"/resume/index.html"}],"posts":[{"title":"Altium Designer学习总结（不定时更新）","text":"","link":"/2021/02/19/AltiumDesigner/"},{"title":"keil uvsion5与51单片机的学习总结（不定时更新）","text":"keil uvsion5软件下载https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw提取码: f7xv （失效请提醒） 常见报错总结 1.*** ERROR L104: MULTIPLE PUBLIC DEFINITIONS 出现该错误则是因为程序中bai某个变du量重复定义，把头文件zhi中的变量定义前加extern(只是变量声明不用初始化)，再在某一个要调用该变量的c文件的程序之前再定义(注意第一个调用的c文件要负责附带初始化该变量，其他调用的c文件就不需要初始化过程啦)。 extern用于变量的用法：extern int a;//声明一个全局变量aint a; //定义一个全局变量aextern int a =0 ;//定义一个全局变量a 并给初值。一旦给予赋值，一定是定义，定义才会分配存储空间。（注意：经过测试在GCC中，这样定义变量是不能通过编译的，而在VS2013可以）int a =0;//定义一个全局变量a,并给初值，声明之后不能直接使用这个变量，需要定义之后才能使用。第四个等于第三个，都是定义一个可以被外部使用的全局变量，并给初值。当你要引用一个全局变量的时候，你就要声明extern int a;这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明，就会出现变量重复定义的错误。 C51语法的常见问题 nop()函数。C语言中没有nop()函数。在51C中一般包含在#include “intrins.h” 头文件中。该函数是在51单片机中用的延时函数，表示执行一条没有什么意义的指令，延时一个指令周期，有的指令周期是两个或两个以上的机械周期，但是nop();指令需要的只是一个机械周期也就是12个时钟周期（震荡周期）。51单片机中，1个机械周期 = 12个时钟周期 = 12 * （ 1 / f）。（f 为晶振频率）。如果只用的是12MHZ的晶振，那么 一个机械周期就是1us；也就是说：nop(); 指令的延迟时间为 1us。可以较为精确得控制延迟时间。 nop指令的作用：1）就是通过nop指令的填充（nop指令一个字节），使指令按字对齐，从而减少取指令时的内存访问次数。（一般用来内存地址偶数对齐，比如有一条指令，占3字节，这时候使用nop指令，cpu 就可以从第四个字节处读取指令了。）2）通过nop指令产生一定的延迟，但是对于快速的CPU来说效果不明显，可以使用rep前缀，多延迟几个时钟。3）i/o传输时，也会用一下 nop，等待缓冲区清空，总线恢复；4）清除由上一个算术逻辑指令设置的flag位；","link":"/2020/12/19/keil/"},{"title":"Hexo 博客的搭建记录","text":"安装Nodejs12node -v #查看node版本npm -v #查看npm版本&gt; 安装淘宝的cnpm 管理器1npm install -g cnpm --registry=http://registry.npm.taobao.org 查看cnpm版本1cnpm -v 安装hexo框架 查看hexo版本12cnpm install -g hexo-clihexo -v ##创建blog目录 123456mkdir blog ``` ## 进入blog目录 生成博客 初始化博客```bashcd blog sudo hexo init 启动本地博客服务 本地访问地址12hexo s http://localhost:4000/ 创建新的文章1hexo n &quot;我的第一篇文章&quot; 返回blog目录hexo clean #清理hexo g #生成 Github创建一个新的仓库YourGithubName.github.io 在blog目录下安装git部署插件cnpm install –save hexo-deployer-git 配置_config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/YourGithubName/YourGithubName.github.io.git branch: master 部署到Github仓库里1hexo d 访问这个地址可以查看博客https://YourGithubName.github.io/ 下载NEXT主题到本地1git clone https://github.com.cnpmjs.org/theme-next/hexo-theme-next themes/next 修改hexo根目录下的 _config.yml 文件1theme: Next 最后发布123hexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库 小技巧1 只需要将www.github.com/改为www.github.com.cnpmjs.org/就可以实现一键式加速","link":"/2020/02/19/construct/"},{"title":"C语言引用头文件时“ ”与&lt; &gt; 的区别","text":"尖括号:直接去系统配置的库环境变量和用户配置的路径去搜索双引号:编译器会先在项目的当前目录查找头文件,一般用于包含用户自己编写的头文件，包含范围最大，找不到后会向尖括号一样在系统配置的库的环境变量去寻找由于搜索范围不同会导致预编译处理的速度不同","link":"/2021/02/21/C%E8%AF%AD%E8%A8%80%E5%BC%95%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E2%80%9C-%E2%80%9D%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB/"}],"tags":[{"name":"Altium Designer","slug":"Altium-Designer","link":"/tags/Altium-Designer/"},{"name":"PCB","slug":"PCB","link":"/tags/PCB/"},{"name":"keil uvsion 5","slug":"keil-uvsion-5","link":"/tags/keil-uvsion-5/"},{"name":"51单片机","slug":"51单片机","link":"/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"头文件","slug":"头文件","link":"/tags/%E5%A4%B4%E6%96%87%E4%BB%B6/"},{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"}],"categories":[{"name":"Altium Designer使用","slug":"Altium-Designer使用","link":"/categories/Altium-Designer%E4%BD%BF%E7%94%A8/"},{"name":"Keil使用","slug":"Keil使用","link":"/categories/Keil%E4%BD%BF%E7%94%A8/"},{"name":"搭建博客","slug":"搭建博客","link":"/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}]}