{"pages":[{"title":"关于","text":"大二在读学生，主要分享自己学习中遇到的一些问题。欢迎关注我的微信公众号：YouthGT","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"Resume","text":"蓄力中，待我经历满满，再来写。定个目标2021.10.1来写","link":"/resume/index.html"}],"posts":[{"title":"Hexo 博客的搭建记录","text":"安装Nodejs12node -v #查看node版本npm -v #查看npm版本&gt; 安装淘宝的cnpm 管理器1npm install -g cnpm --registry=http://registry.npm.taobao.org 查看cnpm版本1cnpm -v 安装hexo框架 查看hexo版本12cnpm install -g hexo-clihexo -v 创建blog目录123456mkdir blog ``` ## 进入blog目录 生成博客 初始化博客```bashcd blog sudo hexo init 启动本地博客服务 本地访问地址12hexo s http://localhost:4000/ 创建新的文章1hexo n &quot;我的第一篇文章&quot; 返回blog目录hexo clean #清理hexo g #生成 Github创建一个新的仓库YourGithubName.github.io 在blog目录下安装git部署插件cnpm install –save hexo-deployer-git 配置_config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/YourGithubName/YourGithubName.github.io.git branch: master 部署到Github仓库里1hexo d 访问这个地址可以查看博客https://YourGithubName.github.io/ 下载NEXT主题到本地1git clone https://github.com.cnpmjs.org/theme-next/hexo-theme-next themes/next 修改hexo根目录下的 _config.yml 文件1theme: Next 1234hexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库 小技巧1 只需要将www.github.com/改为www.github.com.cnpmjs.org/就可以实现一键式加速","link":"/2020/02/19/construct/"},{"title":"keil uvsion5与51单片机的学习总结（不定时更新）","text":"keil uvsion5软件下载https://pan.baidu.com/s/1QjmrZcayz0edyzkcLT7nCw提取码: f7xv （失效请提醒） 常见报错总结 1.*** ERROR L104: MULTIPLE PUBLIC DEFINITIONS 出现该错误则是因为程序中bai某个变du量重复定义，把头文件zhi中的变量定义前加extern(只是变量声明不用初始化)，再在某一个要调用该变量的c文件的程序之前再定义(注意第一个调用的c文件要负责附带初始化该变量，其他调用的c文件就不需要初始化过程啦)。 extern用于变量的用法：extern int a;//声明一个全局变量aint a; //定义一个全局变量aextern int a =0 ;//定义一个全局变量a 并给初值。一旦给予赋值，一定是定义，定义才会分配存储空间。（注意：经过测试在GCC中，这样定义变量是不能通过编译的，而在VS2013可以）int a =0;//定义一个全局变量a,并给初值，声明之后不能直接使用这个变量，需要定义之后才能使用。第四个等于第三个，都是定义一个可以被外部使用的全局变量，并给初值。当你要引用一个全局变量的时候，你就要声明extern int a;这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明，就会出现变量重复定义的错误。 C51语法的常见问题 nop()函数。C语言中没有nop()函数。在51C中一般包含在#include “intrins.h” 头文件中。该函数是在51单片机中用的延时函数，表示执行一条没有什么意义的指令，延时一个指令周期，有的指令周期是两个或两个以上的机械周期，但是nop();指令需要的只是一个机械周期也就是12个时钟周期（震荡周期）。51单片机中，1个机械周期 = 12个时钟周期 = 12 * （ 1 / f）。（f 为晶振频率）。如果只用的是12MHZ的晶振，那么 一个机械周期就是1us；也就是说：nop(); 指令的延迟时间为 1us。可以较为精确得控制延迟时间。 nop指令的作用：1）就是通过nop指令的填充（nop指令一个字节），使指令按字对齐，从而减少取指令时的内存访问次数。（一般用来内存地址偶数对齐，比如有一条指令，占3字节，这时候使用nop指令，cpu 就可以从第四个字节处读取指令了。）2）通过nop指令产生一定的延迟，但是对于快速的CPU来说效果不明显，可以使用rep前缀，多延迟几个时钟。3）i/o传输时，也会用一下 nop，等待缓冲区清空，总线恢复；4）清除由上一个算术逻辑指令设置的flag位；","link":"/2020/12/19/keil/"},{"title":"C语言引用头文件时“ ”与&lt; &gt; 的区别","text":"尖括号:直接去系统配置的库环境变量和用户配置的路径去搜索双引号:编译器会先在项目的当前目录查找头文件,一般用于包含用户自己编写的头文件，包含范围最大，找不到后会向尖括号一样在系统配置的库的环境变量去寻找由于搜索范围不同会导致预编译处理的速度不同","link":"/2021/02/21/C%E8%AF%AD%E8%A8%80%E5%BC%95%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E2%80%9C-%E2%80%9D%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"title":"Altium Designer学习总结（不定时更新）","text":"Altlium designer画PCB步骤 原理图绘制元件的放置，网络编号，封装添加（封装管理器），编译，导入到PCB PCB绘制 布局，布线，敷铜，电器规则检查（规则设置）调整并锁定特殊零件 常见特殊位置的零件： 接口类：如：电源接口、扬声器、视频、音频接口、键盘、鼠标、USB等； 显示类：如：发光二极管、数码显示管等; 旋钮类：如：音量控制、调谐、波段等； 其他类：必须放置在特定位置的零件。PCB设计的基本原则布局原则 元件的布局要求均衡，疏密有序，避免头重脚轻。 元件布局应按照元件的关键性来进行，先布置关键元件如微处理器、DSP、FPGA、存储器等，按照数据线和地址线的走向，就近原则布置元件。 存储器模块尽量并排放置，以缩短走线长度。 尽可能按照信号流向进行布局。注意：零件布局，应当从机械结构散热、电磁干扰、将来布线的方便性等方面综合考虑。先布置与机械尺寸有关的器件，并锁定这些器件，然后是大的占位置的器件和电路的核心元件，再是外围的小元件。布线原则 一定要确保导线的宽度达到导线的载流要求，并尽可能宽些，留出余量。电源和地的导线要更宽，具体数值视实际情况而定。地线＞电源线＞导线 导线间最小间距是由线的绝缘电阻和击穿电阻决定的，在可能的情况下尽量定得大一些，一般不能小于12mil。 设计布线时，走线尽量少拐弯，力求线条简单明了。 微处理器芯片的数据线地址线应尽量平行布置。 输入端与输入端边线应避免相邻平行，以免产生反射干扰，必要时应加线隔离。两相邻的布线要相互垂直。平行容易产生寄生耦合。 利用包地，覆铜等工艺提高PCB的稳定性和抗干扰性。重点规则 零件（元件）之间最小距离。 零件方向。 零件放置所在层。 导线的宽度。 导线所在层。常见问题 action not available in 3D view的意思是：3D视图中不可用的操作，也就是不能连线（按 2 就可以连线）。如果是要在3D模式切换视角，就是：Shift+鼠标右键，Ctrl+鼠标右键是放大缩小。v+b是翻转。 出现多余的线点工具-》复位错误标志 系统自带了两个集成库：多种器件集成库miscellaneous devices和多种连接器miscellaneous connectors。这两个集成库，包括了画原理图和PCB板图所需要的绝大部分零件。但集成库中有的SCH零件或PCB封装的外形、图形，不是我们所需的，不符合我们的要求，需要进行修改。但我们知道集成库是不能直接修改和编辑的。需要先把集成库分解成SCH库和PCB库，然后分别启动SCH图编辑器或PCB库编辑器，进行修改。方法很简单。在电脑硬盘上找到adxx软件的安装位置找到AD16软件 -双击打开软件的文件夹———-双击打开库文件夹Librares——-找到miscellaneous devices intlib——-电脑自动启动AD程序——–弹出：摘录源文件或安装文件 对话框——–点击对话框底部：摘取源文件———弹出：萃取位置对话框———–选中：打开已有的集成库工程———–单击：确定———此时在AD16屏幕的左侧弹出：projects工程面板———面板内出现分解出来的SCHLIB原理图库和PCBLIB封装库———双击SCHLIB——–打开SCH库零件视图———-单击AD16屏幕右下角的SCH——–选中SCH LIBRARY———弹出SCH库面板——-在SCH库面板的器件栏———-显示上百种SCH零件———选中需要的SCH零件——–单击选中——-在SCH库编辑器的主窗口选中这个SCH零件的图形——对图形进行编辑和修改 使之符合你的个人要求——–保持——–退出。同理：如果想要在AD16系统自带的集成库中添加零件，也是不能直接添加的，也要先把集成库分解成SCH库和PCB库，然后在SCH库中添加新零件，在SCH零件编辑器中添加PCB封装模型。就OK了。4. GPIO（英语：General-purpose input/output），通用型之输入输出的简称，功能类似8051的P0—P3，其接脚可以供使用者由程控自由使用，PIN脚依现实考量可作为通用输入（GPI）或通用输出（GPO）或通用输入与输出（GPIO），如当clk generator, chip select等。5. 主菜单File-&gt;Import，选择一个AutoCAD文件（*.DXF或*.DWG），在弹出的对话框“Import From AutoCAD”中，设置CAD单位到PCB单位的转换（例如：1 AutoCAD Unit = 1mm），CAD文件导入PCB的哪一层（例如：放置于Mechanical4层），点击OK即可。切换层标签到Mechanical4，快捷键s-&gt;All on layer。主菜单Design-&gt;Board Shape-&gt;Define from Selected Objects，按end键刷新一下页面即可6. Top Solder层，就是用来控制做板的时候不覆盖绿油（白油）的区域，比如焊盘的位置，一些关键信号的测试点，不覆盖绿油，才能漏出焊盘。如果你在焊盘的位置不包含Top Solder层，则焊盘会盖上绿油，需要你磨掉绿油（白油），才能焊接。Top Paste层，提供给制版厂，用于制作钢网，凡是Top Paste层出现的地方，钢网上均开孔。也就是说，这一层不是用来控制PCB的，而是控制钢网开孔的，当SMT贴片生产时，这些开孔用来刷锡膏，刷锡膏（漏锡膏）的位置，恰好就是焊盘所在地位置。7. SOT的英文全名是：Small Outline Transistor(小外形晶体管)，SOT是一种表面贴装的封装形式，一般引脚小于等于5个的小外形晶体管。根据表面宽度的不同分为两种，一种宽度为1.3mm，一种宽度为1.6mm。SOD的英文全名是：Small Outline Diode(小外形二级管)，SOD后面常会是跟一串数字，表示封装的标准序号，如：SOD-23,SOD-523，SOD323等等。其实SOD指贴片二极管的封装，而SOT是一般指贴片三极管的封装。","link":"/2021/02/19/AltiumDesigner/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"keil uvsion 5","slug":"keil-uvsion-5","link":"/tags/keil-uvsion-5/"},{"name":"51单片机","slug":"51单片机","link":"/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"头文件","slug":"头文件","link":"/tags/%E5%A4%B4%E6%96%87%E4%BB%B6/"},{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"Altium Designer","slug":"Altium-Designer","link":"/tags/Altium-Designer/"},{"name":"PCB","slug":"PCB","link":"/tags/PCB/"}],"categories":[{"name":"搭建博客","slug":"搭建博客","link":"/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"软件使用","slug":"软件使用","link":"/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"}]}